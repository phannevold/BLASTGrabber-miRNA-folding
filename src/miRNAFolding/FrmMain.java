/*
 * frmMain.java
 */
package miRNAFolding;

/**
 * @author Eirik Krogstad
 */
public class FrmMain extends javax.swing.JInternalFrame {

    /** Creates new form FrmMain */
    public FrmMain() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTitle = new javax.swing.JLabel();
        jScrollPaneInstructions = new javax.swing.JScrollPane();
        jTextAreaInstructions = new javax.swing.JTextArea();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jLabelTitle.setFont(new java.awt.Font("SansSerif", 1, 16));
        jLabelTitle.setText("miRNA Folding for BLASTGrabber");

        jTextAreaInstructions.setColumns(20);
        jTextAreaInstructions.setEditable(false);
        jTextAreaInstructions.setFont(new java.awt.Font("SansSerif", 0, 12));
        jTextAreaInstructions.setLineWrap(true);
        jTextAreaInstructions.setRows(5);
        jTextAreaInstructions.setText("BLAST searches will frequently return a large number of hits. When searching for short sequences of microRNA (miRNA), usually 18-24 bases in length, the number of hits can be overwhelming. A number of sequences may not be actual candidates for miRNA.\n\nThis plugin allows the user to fold precursor sequences of miRNA according to the RNAfold algorithm, to see if the segment forms a stable stem/hairpin loop structure, and thereby judge the validity of candidate hits.\n\nUsage:\n1. Select candidate sequences in any data view\n2. Right-click and Quick-grab selected sequences\n3. Mark any or all sequences\n4. Right-click and choose Plugins > miRNA Folding\n\nSequences appear in the clipboard list. Choose sequence to display by left clicking.");
        jTextAreaInstructions.setWrapStyleWord(true);
        jScrollPaneInstructions.setViewportView(jTextAreaInstructions);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneInstructions, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                    .addComponent(jLabelTitle))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneInstructions, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JScrollPane jScrollPaneInstructions;
    private javax.swing.JTextArea jTextAreaInstructions;
    // End of variables declaration//GEN-END:variables
}
