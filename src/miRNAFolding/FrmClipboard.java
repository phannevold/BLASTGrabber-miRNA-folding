/*
 * frmClipboard.java
 */
package miRNAFolding;

import BLASTGrabber.Facade.BLASTGrabberHit;
import BLASTGrabber.Facade.BLASTGrabberQuery;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Iterator;
import java.io.File;
import java.net.URI;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;

/**
 * @author Eirik Krogstad
 * @author Petter Hannevold
 */
public class FrmClipboard extends javax.swing.JInternalFrame implements ActionListener {
    private HashMap<String, BLASTGrabberQuery> queries;
    private FrmOptions frmOptions;
    private JDesktopPane desktop;
    private BLASTGrabber.Facade facade;

    /** Creates new form FrmClipboard */
    public FrmClipboard() {
        initComponents();
    }

    public void init(HashMap<String, BLASTGrabberQuery> queries, JDesktopPane desktop, BLASTGrabber.Facade facade) {
        this.queries = queries;
        this.desktop = desktop;
        this.facade = facade;

        DefaultListModel listModel = new DefaultListModel();
        jListQueries.setModel(listModel);

        int pos = 0;
        Iterator<String> itQ = queries.keySet().iterator();

        while (itQ.hasNext()) {
            String queryName = itQ.next();
            pos = listModel.getSize();
            listModel.add(pos, queryName + ":");
            Iterator<BLASTGrabberHit> itH = queries.get(queryName).Hits.iterator();
            while (itH.hasNext()) {
                pos = listModel.getSize();
                listModel.add(pos, "  " + itH.next().SequenceHeader);
            }
        }

        /*
        ArrayList<String> fasta = facade.getFASTACustomDBSequences(queries);

        Iterator<String> itS = fasta.iterator();

        while (itS.hasNext()) {
            jTextAreaTemp.setText(itS.next());
        }
        */

        frmOptions = new FrmOptions();
        desktop.add(frmOptions);
        jButtonOptions.addActionListener(this);

        // to be removed - for testing purposes
        String test = ">test\nGGGCUAUUAGCUCAGUUGGUUAGAGCGCACCCCUGAUAAGGGUGAGGUCGCUGAUUCGAAUUCAGCAUAGCCCA";
        RNAFolder.runSequencePlot(test, frmOptions);
        loadSVG(ColorAnnotator.annnotateSVG("test_ss.svg", null));
    }

    private void loadSVG(String filename) {
        try {
          URI uri = new File(filename).toURI();
          svgPanel.setSvgURI(uri);
        } catch (Exception e) {
          System.out.println(e.getMessage());
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        int frmX = this.getX();
        int frmW = this.getWidth();
        int screenW = Toolkit.getDefaultToolkit().getScreenSize().width;
        if (frmX + frmW + frmOptions.getWidth() > screenW)
            frmOptions.setLocation(50, 50);
        else
            frmOptions.setLocation(frmX + frmW, this.getY());
        frmOptions.setVisible(!frmOptions.isVisible());
    }

    // to be removed - for testing purposes
    public static void main(String[] args) {
        JFrame main = new JFrame("Test frame");
        main.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JDesktopPane desktop = new JDesktopPane();
        main.add(desktop);

        FrmClipboard intFrm = new FrmClipboard();

        BLASTGrabberHit testHit1 = new BLASTGrabberHit();
        testHit1.SequenceHeader = ">test Hit one-1 (EINs) uno-en [singular mono alpha]";
        BLASTGrabberHit testHit2 = new BLASTGrabberHit();
        testHit2.SequenceHeader = ">test Hit two22 duo-bi (ZWEI-too to2) II [dual plural beta no. 2]";

        BLASTGrabberQuery testQuery = new BLASTGrabberQuery();
        testQuery.Name = "Test query";
        testQuery.Hits.add(testHit1);
        testQuery.Hits.add(testHit2);

        HashMap<String, BLASTGrabberQuery> testData = new HashMap<String, BLASTGrabberQuery>();
        testData.put(">test category 1 [RANDOM garb] age-2 make [THIS seemlike] actualdata", testQuery);

        intFrm.init(testData, desktop, null);
        desktop.add(intFrm);
        intFrm.setVisible(true);
        desktop.setVisible(true);
        main.setVisible(true);
        desktop.setPreferredSize(new Dimension(1300, 700));
        main.pack();
        main.setExtendedState(main.getExtendedState() | main.MAXIMIZED_BOTH);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneQueries = new javax.swing.JScrollPane();
        jListQueries = new javax.swing.JList();
        jButtonOptions = new javax.swing.JButton();
        svgPanel = new com.kitfox.svg.app.beans.SVGPanel();
        jScrollPaneTemp = new javax.swing.JScrollPane();
        jTextAreaTemp = new javax.swing.JTextArea();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jListQueries.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPaneQueries.setViewportView(jListQueries);

        jButtonOptions.setText("Options...");

        svgPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(180, 180, 180)));
        svgPanel.setFont(new java.awt.Font("SansSerif", 0, 11));
        svgPanel.setPreferredSize(new java.awt.Dimension(400, 400));
        svgPanel.setScaleToFit(true);
        svgPanel.setUseAntiAlias(true);

        javax.swing.GroupLayout svgPanelLayout = new javax.swing.GroupLayout(svgPanel);
        svgPanel.setLayout(svgPanelLayout);
        svgPanelLayout.setHorizontalGroup(
            svgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );
        svgPanelLayout.setVerticalGroup(
            svgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );

        jTextAreaTemp.setColumns(20);
        jTextAreaTemp.setRows(5);
        jScrollPaneTemp.setViewportView(jTextAreaTemp);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(svgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneTemp, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonOptions))
                    .addComponent(jScrollPaneQueries, javax.swing.GroupLayout.DEFAULT_SIZE, 973, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneQueries, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonOptions)
                    .addComponent(svgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPaneTemp))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOptions;
    private javax.swing.JList jListQueries;
    private javax.swing.JScrollPane jScrollPaneQueries;
    private javax.swing.JScrollPane jScrollPaneTemp;
    private javax.swing.JTextArea jTextAreaTemp;
    private com.kitfox.svg.app.beans.SVGPanel svgPanel;
    // End of variables declaration//GEN-END:variables
}
